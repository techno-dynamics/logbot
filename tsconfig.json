/*
  A TSConfig with everything!

  Format:
  Description.
  Value (default): type (description)
*/

{
  /*
    Specify a base tsconfig file to inherit from.
    Value: string (The path to the base file)
  */
  // "extends": "../tsconfig.json",

  /*
    TypeScript compiler options.
    Value: object
  */
  "compilerOptions": {
    /* BASIC COMPILER OPTIONS */

    /*
      The target ECMAScript version
      Value ('es3'): 'es3', 'es5', 'es6' / 'es2015', 'es2016', 'es2017','es2018', 'es2019', 'es2020', or 'esnext'
    */
    "target": "es2017",

    /*
      Library files to be included in compilation.
      Value: string[]
    */
    "lib": [
      "ES5",
      "ES6",
      // "ES2015",
      // "ES2017",
      "ES7",
      // "ES2016",
      // "ES2018",
      "ESNext",
      "DOM",
      "DOM.Iterable",
      // "WebWorker",
      "ScriptHost"
      // "ES2015.Core",
      // "ES2015.Collection",
      // "ES2015.Generator",
      // "ES2015.Iterable",
      // "ES2015.Promise",
      // "ES2015.Proxy",
      // "ES2015.Reflect",
      // "ES2015.Symbol",
      // "ES2015.Symbol.WellKnown",
      // "ES2016.Array.Include",
      // "ES2017.object",
      // "ES2017.Intl",
      // "ES2017.SharedMemory",
      // "ES2017.String",
      // "ES2017.TypedArrays",
      // "ES2018.Intl",
      // "ES2018.Promise",
      // "ES2018.RegExp",
      // "ESNext.AsyncIterable",
      // "ESNext.Array",
      // "ESNext.Intl",
      // "ESNext.Symbol"
    ],

    /* STRICT TYPE-CHECKING OPTIONS */

    /*
      Enable all strict type-checking options.
      Value (false): boolean
    */
    "strict": true,

    /*
      Parse in strict mode and emit "use strict" in output
      Value (false): boolean
    */
    // "alwaysStrict": true,

    /*
      Enable strict checking on Function#bind, Function#call, and Function#apply.
      Value (false): boolean
    */
    "strictBindCallApply": true,

    /*
      Enable strict checking for function types.
      Value: boolean (false)
    */
    "strictFunctionTypes": true,

    /*
      Enable strict null checks.
      Value: boolean (false)
    */
    "strictNullChecks": true,

    /*
      Enable strict property initialization for classes.
      Value: boolean (false)
    */
    "strictPropertyInitialization": true,

    /*
      Disable usage of implied type of 'any'.
      Value: boolean (false)
    */
    "noImplicitAny": true,

    /*
      Disable usage of 'this' with an implied type of 'any'.
      Value: boolean (false)
    */
    "noImplicitThis": true,

    /* ADDITIONAL STRICT CHECKS */

    /*
      Allow unreachable code.
      Value (false): boolean
    */
    // "allowUnreachableCode": false,

    /*
      Allow unused labels.
      Value (false): boolean
    */
    // "allowUnusedLabels": false,

    /*
      Enforce all code paths to return a value
      Value (false): boolean
    */
    "noImplicitReturns": true,

    /*
      Disallow fallthrough cases in the switch statement.
      Value (false): boolean
    */
    "noFallthroughCasesInSwitch": true,

    /*
      Disable strict generic type-checking.
      Value (false): boolean
    */
    // "noStrictGenericChecks": false,

    /*
      Disallow unused local variables.
      Value (false): boolean
    */
    // "noUnusedLocals": true,

    /*
      Disallow unused local variables.
      Value (false): boolean
    */
    // "noUnusedParameters": false,

    /*
      Skip type checking of declaration files.
      Value (false): boolean
    */
    "skipLibCheck": true,

    /*
      Suppress excess property errors on objects.
      Value (false): boolean
    */
    // "suppressExcessPropertyErrors": false,

    /*
      Suppress noImplicitAny errors for indexing objects without index signatures.
      Value (false): boolean
    */
    // "suppressImplicitAnyIndexErrors": false,

    /*
      Ensure consistent casing when referencing files.
      Value (false): boolean
    */
    "forceConsistentCasingInFileNames": true,

    /* MODULE RESOLUTION OPTIONS */

    /*
      Module code generation.
      Value (target == 'ES3' or 'ES5' -> 'CommonJS' -> 'ES6'): 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6', 'ES2015', or 'ESNext'
    */
    "module": "CommonJS",

    /*
      Module resolution strategy
      Value ('node'): 'node' or 'classic'
    */
    "moduleResolution": "node",

    /*
      Emit '__importStar' and '__importDefault' helpers for runtime babel ecosystem compatibility and enable '--allowSyntheticDefaultImports' for type system compatibility.
      Value (false): boolean
    */
    "esModuleInterop": true,

    /*
      Allow default imports from modules with no default export.
      Value (module == "system" or esModuleInterop): boolean
    */
    "allowSyntheticDefaultImports": true,

    /*
      Resolve JSON Modules
      Value (false): boolean
    */
    "resolveJsonModule": true,

    /*
      Maximum dependency depth to search in node_modules in JavaScript projects.
      allowJs must be enabled.
      Value (0): number
    */
    // "maxNodeModuleJsDepth": 0,

    /*
      Base directory for input files.
      Value (common root directory, based on input files): string (path)
    */
    // "rootDir": "",

    /*
      List of root directories combined to represent the project's runtime structure.
      Value: string[]
    */
    // "rootDirs": [],

    /*
      Base URL to resolve non-relative module paths.
      Value: string
    */
    "baseUrl": ".",

    /*
      Path mappings for the compiler. Not compiled for runtime!
      Value: object
    */
    "paths": {
      // "@util": "path-to-utils"
    },

    /*
      Allow accessing UMD globals from modules.
      Value (false): boolean
    */
    // "allowUmdGlobalAccess": false,

    /* TYPINGS AND DECLARATIONS */

    /*
      Generate declaration 'd.ts' files.
      Value (false): boolean
    */
    "declaration": false,

    /*
      Directory to place generated typings.
      Value (with emitted code): string (path)
    */
    // "declarationDir": "",

    /*
      Generate sourcemaps for declarations.
      Value (false): boolean
    */
    // "declarationMap": true,

    /* SOURCE MAPPING OPTIONS */

    /*
      Generate sourcemaps.
      Value (false): boolean
    */
    // "sourceMap": true,

    /*
      Directory to place generated sourcemaps.
      Value (with emitted code): string (path)
    */
    // "mapRoot": "",

    /*
      Inline sourcemap into one file.
      Value (false): boolean
    */
    // "inlineSourceMap": false,

    /*
      Emit sources inline with sourcemaps.
      Value (false): boolean
    */
    // "inlineSources": false,

    /* SOURCE OPTIONS */
    /*
      Source character set.
      Value (utf8): string
    */
    "charset": "utf8",

    /*
      Source root dir.
      Value: string (path)
    */
    // "sourceRoot": "",

    /*
      Resolve keyof to string valued property names only.
      Value (false): boolean
    */
    // "keyofStringsOnly": false,

    /*
      Full support for iterables in for-of, spread, and destructing when targeting ES3 or ES5.
      Value (false): boolean
    */
    // "downlevelIteration": false,

    /*
      Allow JavaScript Source.
      Value (false): boolean
    */
    // "allowJs": false,

    /*
      Check for errors in JavaScript sources.
      Value (false): boolean
    */
    // "checkJs": false,

    /* OUTPUT GENERATION OPTIONS */

    /*
      Output directory for compiled sources.
      Value (with output): string
    */
    "outDir": "dist/",

    /*
      Concatenate and emit output into a single file.
      Value: string
    */
    // "outFile": "",

    /*
      File endings for emitted output.
      Value (platform specific): 'crlf' or 'lf'
    */
    "newLine": "lf",

    /*
      Dont include the default library.
      Value (false): boolean
    */
    // "noLib": false,

    /*
      Don't add triple-slash references or module import targets to the list of compiled files.
      Value (false): boolean
    */
    // "noResolve": false,

    /*
      List of directories for type definitions to be included.
      Value: string[]
    */
    // "typeRoots": [],

    /*
      Declaration files to be included.
      Value: string[]
    */
    // "types": [],

    /*
      Preserve const enum declarations in output.
      Value (false): boolean
    */
    // "preserveConstEnums": false,

    /*
      Preserve Symbolic Links in output rather than resolving them.
      Value (false): boolean
    */
    // "preserveSymlinks": false,

    /*
      Remove comments in emit.
      Copyright header comments starting with /*! are never discarded.
      Value (false): boolean
    */
    "removeComments": true,

    /*
      Strip declarations marked with @internal.
      Value (false): boolean
    */
    "stripInternal": true,

    /*
      Emit ECMAScript standard class fields.
      Value (false): boolean
    */
    // "useDefineForClassFields": false,

    /*
      Do not emit output.
      Value (false): boolean
    */
    "noEmit": false,

    /*
      Do not generate custom helpers in output.
      Value (false): boolean
    */
    // "noEmitHelpers": false,

    /*
      Do not emit output if errors are present.
      Value (false): boolean
    */
    "noEmitOnError": true,

    /*
      Do not emit 'use strict' in output.
      Value (false): boolean
    */
    // "noImplicitUseStrict": false,

    /*
      Import helpers from tslib instead of generating them.
      Value (false): boolean
    */
    // "importHelpers": true,

    /*
      Perform additional checks to insure that separate compilation, such as with transpileModule or @babel/plugin-transform-typescript, would be safe.
      Value (false): boolean
    */
    // "isolatedModules": false,

    /*
      Emit a UTF-8 Byte Order Marking in output files.
      Value (false): boolean
    */
    // "emitBOM": false,

    /*
      Only emit declaration files.
      Value (false): boolean
    */
    // "emitDeclarationOnly": false,

    /*
      Enable building for project references.
      Value (false): boolean
    */
    // "composite": false,

    /*
      Enable incremental compilation.
      Value (false): boolean
    */
    // "incremental": false,

    /*
      File to store incremental compilation information.
      Value: string
    */
    // "tsBuildInfoFile": "",

    /* JSX/TSX OPTIONS */

    /*
      Support JSX in TSX files.
      Value ('preserve'): 'react', 'react-native', 'preserve'
    */
    // "jsx": "preserve",

    /*
      JSX Factory function to use when targeting JSX emit.
      Value ('React.createElement'): string
    */
    // "jsxFactory": "React.createElement",

    /* EXPERIMENTAL OPTIONS */

    /*
      Enable the usage of experimental decorators.
      Value (false): boolean
    */
    "experimentalDecorators": true,

    /*
      Emit design-type metadata for decorated declarations in source.
      Value (false): boolean
    */
    "emitDecoratorMetadata": true,

    /* MISCELLANEOUS OPTIONS */

    /*
      Pretty output.
      Value (false): boolean
    */
    "pretty": true,

    /*
      List emitted files.
      Value (false): boolean
    */
    // "listEmittedFiles": false,

    /*
      List input files.
      Value (false): boolean
    */
    // "listFiles": false,

    /*
      Do not truncate error messages.
      Value (false): boolean
    */
    // "noErrorTruncation": false,

    /*
      Show diagnostic information.
      Value (false): boolean
    */
    // "diagnostics": false,

    /*
      Disable size limit in JavaScript projects.
      Value (false): boolean
    */
    // "disableSizeLimit": false,

    /*
      Watch input files and trigger recompilation on changes.
      Value (false): boolean
    */
    // "watch": true,

    /*
      Preserve console watch output.
      Value (false): boolean
    */
    // "preserveWatchOutput": false,

    /*
      Plugins to utils.
      Value: array
    */
    "plugins": []

    /*
      Trace name resolution.
      Value (false): boolean
    */
    // "traceResolution": false
  },

  /*
    Whether to compile upon saving of a source file.
    Value: boolean
  */
  // "compileOnSave": false,

  /*
    Files to include.
    Value: string[] (List of globs to include)
  */
  "include": ["src/**/*"],

  /*
    Files to exclude.
    Value: string[] (List of globs to exclude)
  */
  "exclude": ["node_modules/*"]

  /*
    Files to include.
    Value: string[] (List of file paths to include)
  */
  // "files": [
  //
  // ],

  /*
    Project references.
    Reference: https://www.typescriptlang.org/docs/handbook/project-references.html
    Value: object[]
  */
  // "references": [
  //   // {
  //   //   /*
  //   //     The path to the reference.
  //   //     Value: string
  //   //   */
  //   //   "path": "",
  //   //
  //   //   /*
  //   //     Whether to prepend the source.
  //   //     Value: boolean
  //   //   */
  //   //   "prepend": true
  //   // }
  // ],

  /*
    Type Acquisition Options.
    Value: object[]
  */
  // "typeAcquisition": {
  //   "enable": false,
  //   "include": [],
  //   "exclude": []
  // }
}
